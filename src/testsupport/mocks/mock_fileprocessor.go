// Code generated by MockGen. DO NOT EDIT.
// Source: pnapctl/fileprocessor/fileprocessor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileProcessor is a mock of FileProcessor interface
type MockFileProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockFileProcessorMockRecorder
}

// MockFileProcessorMockRecorder is the mock recorder for MockFileProcessor
type MockFileProcessorMockRecorder struct {
	mock *MockFileProcessor
}

// NewMockFileProcessor creates a new mock instance
func NewMockFileProcessor(ctrl *gomock.Controller) *MockFileProcessor {
	mock := &MockFileProcessor{ctrl: ctrl}
	mock.recorder = &MockFileProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileProcessor) EXPECT() *MockFileProcessorMockRecorder {
	return m.recorder
}

// ReadFile mocks base method
func (m *MockFileProcessor) ReadFile(filename string, commandName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockFileProcessorMockRecorder) ReadFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileProcessor)(nil).ReadFile), filename)
}
