// Code generated by MockGen. DO NOT EDIT.
// Source: ./common/client/rancher/client.go

// Package mock_rancher is a generated GoMock package.
package sdkmocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ranchersolutionapi "github.com/phoenixnap/go-sdk-bmc/ranchersolutionapi"
)

// MockRancherSdkClient is a mock of RancherSdkClient interface.
type MockRancherSdkClient struct {
	ctrl     *gomock.Controller
	recorder *MockRancherSdkClientMockRecorder
}

// MockRancherSdkClientMockRecorder is the mock recorder for MockRancherSdkClient.
type MockRancherSdkClientMockRecorder struct {
	mock *MockRancherSdkClient
}

// NewMockRancherSdkClient creates a new mock instance.
func NewMockRancherSdkClient(ctrl *gomock.Controller) *MockRancherSdkClient {
	mock := &MockRancherSdkClient{ctrl: ctrl}
	mock.recorder = &MockRancherSdkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRancherSdkClient) EXPECT() *MockRancherSdkClientMockRecorder {
	return m.recorder
}

// ClusterDelete mocks base method.
func (m *MockRancherSdkClient) ClusterDelete(clusterId string) (ranchersolutionapi.DeleteResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDelete", clusterId)
	ret0, _ := ret[0].(ranchersolutionapi.DeleteResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterDelete indicates an expected call of ClusterDelete.
func (mr *MockRancherSdkClientMockRecorder) ClusterDelete(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDelete", reflect.TypeOf((*MockRancherSdkClient)(nil).ClusterDelete), clusterId)
}

// ClusterGetById mocks base method.
func (m *MockRancherSdkClient) ClusterGetById(clusterId string) (ranchersolutionapi.Cluster, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterGetById", clusterId)
	ret0, _ := ret[0].(ranchersolutionapi.Cluster)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterGetById indicates an expected call of ClusterGetById.
func (mr *MockRancherSdkClientMockRecorder) ClusterGetById(clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterGetById", reflect.TypeOf((*MockRancherSdkClient)(nil).ClusterGetById), clusterId)
}

// ClusterPost mocks base method.
func (m *MockRancherSdkClient) ClusterPost(clusterCreate ranchersolutionapi.Cluster) (ranchersolutionapi.Cluster, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterPost", clusterCreate)
	ret0, _ := ret[0].(ranchersolutionapi.Cluster)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClusterPost indicates an expected call of ClusterPost.
func (mr *MockRancherSdkClientMockRecorder) ClusterPost(clusterCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterPost", reflect.TypeOf((*MockRancherSdkClient)(nil).ClusterPost), clusterCreate)
}

// ClustersGet mocks base method.
func (m *MockRancherSdkClient) ClustersGet() ([]ranchersolutionapi.Cluster, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClustersGet")
	ret0, _ := ret[0].([]ranchersolutionapi.Cluster)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClustersGet indicates an expected call of ClustersGet.
func (mr *MockRancherSdkClientMockRecorder) ClustersGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClustersGet", reflect.TypeOf((*MockRancherSdkClient)(nil).ClustersGet))
}
