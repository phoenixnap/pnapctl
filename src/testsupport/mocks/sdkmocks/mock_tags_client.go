// Code generated by MockGen. DO NOT EDIT.
// Source: common/client/tags/client.go

// Package sdkmocks is a generated GoMock package.
package sdkmocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tagapi "github.com/phoenixnap/go-sdk-bmc/tagapi/v2"
)

// MockTagSdkClient is a mock of TagSdkClient interface.
type MockTagSdkClient struct {
	ctrl     *gomock.Controller
	recorder *MockTagSdkClientMockRecorder
}

// MockTagSdkClientMockRecorder is the mock recorder for MockTagSdkClient.
type MockTagSdkClientMockRecorder struct {
	mock *MockTagSdkClient
}

// NewMockTagSdkClient creates a new mock instance.
func NewMockTagSdkClient(ctrl *gomock.Controller) *MockTagSdkClient {
	mock := &MockTagSdkClient{ctrl: ctrl}
	mock.recorder = &MockTagSdkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagSdkClient) EXPECT() *MockTagSdkClientMockRecorder {
	return m.recorder
}

// TagDelete mocks base method.
func (m *MockTagSdkClient) TagDelete(tagId string) (*tagapi.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", tagId)
	ret0, _ := ret[0].(*tagapi.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagDelete indicates an expected call of TagDelete.
func (mr *MockTagSdkClientMockRecorder) TagDelete(tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockTagSdkClient)(nil).TagDelete), tagId)
}

// TagGetById mocks base method.
func (m *MockTagSdkClient) TagGetById(tagId string) (*tagapi.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagGetById", tagId)
	ret0, _ := ret[0].(*tagapi.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagGetById indicates an expected call of TagGetById.
func (mr *MockTagSdkClientMockRecorder) TagGetById(tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagGetById", reflect.TypeOf((*MockTagSdkClient)(nil).TagGetById), tagId)
}

// TagPatch mocks base method.
func (m *MockTagSdkClient) TagPatch(tagId string, tagUpdate tagapi.TagUpdate) (*tagapi.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagPatch", tagId, tagUpdate)
	ret0, _ := ret[0].(*tagapi.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagPatch indicates an expected call of TagPatch.
func (mr *MockTagSdkClientMockRecorder) TagPatch(tagId, tagUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagPatch", reflect.TypeOf((*MockTagSdkClient)(nil).TagPatch), tagId, tagUpdate)
}

// TagPost mocks base method.
func (m *MockTagSdkClient) TagPost(tagCreate tagapi.TagCreate) (*tagapi.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagPost", tagCreate)
	ret0, _ := ret[0].(*tagapi.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagPost indicates an expected call of TagPost.
func (mr *MockTagSdkClientMockRecorder) TagPost(tagCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagPost", reflect.TypeOf((*MockTagSdkClient)(nil).TagPost), tagCreate)
}

// TagsGet mocks base method.
func (m *MockTagSdkClient) TagsGet(name string) ([]tagapi.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagsGet", name)
	ret0, _ := ret[0].([]tagapi.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsGet indicates an expected call of TagsGet.
func (mr *MockTagSdkClientMockRecorder) TagsGet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsGet", reflect.TypeOf((*MockTagSdkClient)(nil).TagsGet), name)
}
