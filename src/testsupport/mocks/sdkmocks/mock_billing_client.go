// Code generated by MockGen. DO NOT EDIT.
// Source: common/client/billing/client.go

// Package sdkmocks is a generated GoMock package.
package sdkmocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	billingapi "github.com/phoenixnap/go-sdk-bmc/billingapi"
)

// MockBillingSdkClient is a mock of BillingSdkClient interface.
type MockBillingSdkClient struct {
	ctrl     *gomock.Controller
	recorder *MockBillingSdkClientMockRecorder
}

// MockBillingSdkClientMockRecorder is the mock recorder for MockBillingSdkClient.
type MockBillingSdkClientMockRecorder struct {
	mock *MockBillingSdkClient
}

// NewMockBillingSdkClient creates a new mock instance.
func NewMockBillingSdkClient(ctrl *gomock.Controller) *MockBillingSdkClient {
	mock := &MockBillingSdkClient{ctrl: ctrl}
	mock.recorder = &MockBillingSdkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingSdkClient) EXPECT() *MockBillingSdkClientMockRecorder {
	return m.recorder
}

// AccountBillingConfigurationGet mocks base method.
func (m *MockBillingSdkClient) AccountBillingConfigurationGet() (*billingapi.ConfigurationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountBillingConfigurationGet")
	ret0, _ := ret[0].(*billingapi.ConfigurationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountBillingConfigurationGet indicates an expected call of AccountBillingConfigurationGet.
func (mr *MockBillingSdkClientMockRecorder) AccountBillingConfigurationGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountBillingConfigurationGet", reflect.TypeOf((*MockBillingSdkClient)(nil).AccountBillingConfigurationGet))
}

// ProductAvailabilityGet mocks base method.
func (m *MockBillingSdkClient) ProductAvailabilityGet(productCategory, productCode []string, showOnlyMinQuantityAvailable bool, location, solution []string, minQuantity float32) ([]billingapi.ProductAvailability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductAvailabilityGet", productCategory, productCode, showOnlyMinQuantityAvailable, location, solution, minQuantity)
	ret0, _ := ret[0].([]billingapi.ProductAvailability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductAvailabilityGet indicates an expected call of ProductAvailabilityGet.
func (mr *MockBillingSdkClientMockRecorder) ProductAvailabilityGet(productCategory, productCode, showOnlyMinQuantityAvailable, location, solution, minQuantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductAvailabilityGet", reflect.TypeOf((*MockBillingSdkClient)(nil).ProductAvailabilityGet), productCategory, productCode, showOnlyMinQuantityAvailable, location, solution, minQuantity)
}

// ProductsGet mocks base method.
func (m *MockBillingSdkClient) ProductsGet(productCode, productCategory, skuCode, location string) ([]billingapi.ProductsGet200ResponseInner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductsGet", productCode, productCategory, skuCode, location)
	ret0, _ := ret[0].([]billingapi.ProductsGet200ResponseInner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductsGet indicates an expected call of ProductsGet.
func (mr *MockBillingSdkClientMockRecorder) ProductsGet(productCode, productCategory, skuCode, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductsGet", reflect.TypeOf((*MockBillingSdkClient)(nil).ProductsGet), productCode, productCategory, skuCode, location)
}

// RatedUsageGet mocks base method.
func (m *MockBillingSdkClient) RatedUsageGet(fromYearMonth, toYearMonth, productCategory string) ([]billingapi.RatedUsageGet200ResponseInner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatedUsageGet", fromYearMonth, toYearMonth, productCategory)
	ret0, _ := ret[0].([]billingapi.RatedUsageGet200ResponseInner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatedUsageGet indicates an expected call of RatedUsageGet.
func (mr *MockBillingSdkClientMockRecorder) RatedUsageGet(fromYearMonth, toYearMonth, productCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatedUsageGet", reflect.TypeOf((*MockBillingSdkClient)(nil).RatedUsageGet), fromYearMonth, toYearMonth, productCategory)
}

// RatedUsageMonthToDateGet mocks base method.
func (m *MockBillingSdkClient) RatedUsageMonthToDateGet(productCategory string) ([]billingapi.RatedUsageGet200ResponseInner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatedUsageMonthToDateGet", productCategory)
	ret0, _ := ret[0].([]billingapi.RatedUsageGet200ResponseInner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatedUsageMonthToDateGet indicates an expected call of RatedUsageMonthToDateGet.
func (mr *MockBillingSdkClientMockRecorder) RatedUsageMonthToDateGet(productCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatedUsageMonthToDateGet", reflect.TypeOf((*MockBillingSdkClient)(nil).RatedUsageMonthToDateGet), productCategory)
}

// ReservationConvert mocks base method.
func (m *MockBillingSdkClient) ReservationConvert(id string, request billingapi.ReservationRequest) (*billingapi.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationConvert", id, request)
	ret0, _ := ret[0].(*billingapi.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationConvert indicates an expected call of ReservationConvert.
func (mr *MockBillingSdkClientMockRecorder) ReservationConvert(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationConvert", reflect.TypeOf((*MockBillingSdkClient)(nil).ReservationConvert), id, request)
}

// ReservationDisableAutoRenew mocks base method.
func (m *MockBillingSdkClient) ReservationDisableAutoRenew(id string, request billingapi.ReservationAutoRenewDisableRequest) (*billingapi.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationDisableAutoRenew", id, request)
	ret0, _ := ret[0].(*billingapi.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationDisableAutoRenew indicates an expected call of ReservationDisableAutoRenew.
func (mr *MockBillingSdkClientMockRecorder) ReservationDisableAutoRenew(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationDisableAutoRenew", reflect.TypeOf((*MockBillingSdkClient)(nil).ReservationDisableAutoRenew), id, request)
}

// ReservationEnableAutoRenew mocks base method.
func (m *MockBillingSdkClient) ReservationEnableAutoRenew(id string) (*billingapi.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationEnableAutoRenew", id)
	ret0, _ := ret[0].(*billingapi.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationEnableAutoRenew indicates an expected call of ReservationEnableAutoRenew.
func (mr *MockBillingSdkClientMockRecorder) ReservationEnableAutoRenew(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationEnableAutoRenew", reflect.TypeOf((*MockBillingSdkClient)(nil).ReservationEnableAutoRenew), id)
}

// ReservationGetById mocks base method.
func (m *MockBillingSdkClient) ReservationGetById(id string) (*billingapi.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationGetById", id)
	ret0, _ := ret[0].(*billingapi.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationGetById indicates an expected call of ReservationGetById.
func (mr *MockBillingSdkClientMockRecorder) ReservationGetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationGetById", reflect.TypeOf((*MockBillingSdkClient)(nil).ReservationGetById), id)
}

// ReservationsGet mocks base method.
func (m *MockBillingSdkClient) ReservationsGet(productCategory string) ([]billingapi.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationsGet", productCategory)
	ret0, _ := ret[0].([]billingapi.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationsGet indicates an expected call of ReservationsGet.
func (mr *MockBillingSdkClientMockRecorder) ReservationsGet(productCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationsGet", reflect.TypeOf((*MockBillingSdkClient)(nil).ReservationsGet), productCategory)
}

// ReservationsPost mocks base method.
func (m *MockBillingSdkClient) ReservationsPost(request billingapi.ReservationRequest) (*billingapi.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationsPost", request)
	ret0, _ := ret[0].(*billingapi.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationsPost indicates an expected call of ReservationsPost.
func (mr *MockBillingSdkClientMockRecorder) ReservationsPost(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationsPost", reflect.TypeOf((*MockBillingSdkClient)(nil).ReservationsPost), request)
}
