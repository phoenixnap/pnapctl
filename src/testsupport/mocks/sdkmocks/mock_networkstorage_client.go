// Code generated by MockGen. DO NOT EDIT.
// Source: common/client/networkstorage/client.go

// Package sdkmocks is a generated GoMock package.
package sdkmocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	networkstorageapi "github.com/phoenixnap/go-sdk-bmc/networkstorageapi"
)

// MockNetworkStorageSdkClient is a mock of NetworkStorageSdkClient interface.
type MockNetworkStorageSdkClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkStorageSdkClientMockRecorder
}

// MockNetworkStorageSdkClientMockRecorder is the mock recorder for MockNetworkStorageSdkClient.
type MockNetworkStorageSdkClientMockRecorder struct {
	mock *MockNetworkStorageSdkClient
}

// NewMockNetworkStorageSdkClient creates a new mock instance.
func NewMockNetworkStorageSdkClient(ctrl *gomock.Controller) *MockNetworkStorageSdkClient {
	mock := &MockNetworkStorageSdkClient{ctrl: ctrl}
	mock.recorder = &MockNetworkStorageSdkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkStorageSdkClient) EXPECT() *MockNetworkStorageSdkClientMockRecorder {
	return m.recorder
}

// NetworkStorageDelete mocks base method.
func (m *MockNetworkStorageSdkClient) NetworkStorageDelete(storageId string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkStorageDelete", storageId)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkStorageDelete indicates an expected call of NetworkStorageDelete.
func (mr *MockNetworkStorageSdkClientMockRecorder) NetworkStorageDelete(storageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkStorageDelete", reflect.TypeOf((*MockNetworkStorageSdkClient)(nil).NetworkStorageDelete), storageId)
}

// NetworkStorageGet mocks base method.
func (m *MockNetworkStorageSdkClient) NetworkStorageGet() ([]networkstorageapi.StorageNetwork, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkStorageGet")
	ret0, _ := ret[0].([]networkstorageapi.StorageNetwork)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NetworkStorageGet indicates an expected call of NetworkStorageGet.
func (mr *MockNetworkStorageSdkClientMockRecorder) NetworkStorageGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkStorageGet", reflect.TypeOf((*MockNetworkStorageSdkClient)(nil).NetworkStorageGet))
}

// NetworkStorageGetById mocks base method.
func (m *MockNetworkStorageSdkClient) NetworkStorageGetById(storageId string) (*networkstorageapi.StorageNetwork, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkStorageGetById", storageId)
	ret0, _ := ret[0].(*networkstorageapi.StorageNetwork)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NetworkStorageGetById indicates an expected call of NetworkStorageGetById.
func (mr *MockNetworkStorageSdkClientMockRecorder) NetworkStorageGetById(storageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkStorageGetById", reflect.TypeOf((*MockNetworkStorageSdkClient)(nil).NetworkStorageGetById), storageId)
}

// NetworkStorageGetVolumeById mocks base method.
func (m *MockNetworkStorageSdkClient) NetworkStorageGetVolumeById(storageId, volumeId string) (*networkstorageapi.Volume, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkStorageGetVolumeById", storageId, volumeId)
	ret0, _ := ret[0].(*networkstorageapi.Volume)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NetworkStorageGetVolumeById indicates an expected call of NetworkStorageGetVolumeById.
func (mr *MockNetworkStorageSdkClientMockRecorder) NetworkStorageGetVolumeById(storageId, volumeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkStorageGetVolumeById", reflect.TypeOf((*MockNetworkStorageSdkClient)(nil).NetworkStorageGetVolumeById), storageId, volumeId)
}

// NetworkStorageGetVolumes mocks base method.
func (m *MockNetworkStorageSdkClient) NetworkStorageGetVolumes(storageId string) ([]networkstorageapi.Volume, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkStorageGetVolumes", storageId)
	ret0, _ := ret[0].([]networkstorageapi.Volume)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NetworkStorageGetVolumes indicates an expected call of NetworkStorageGetVolumes.
func (mr *MockNetworkStorageSdkClientMockRecorder) NetworkStorageGetVolumes(storageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkStorageGetVolumes", reflect.TypeOf((*MockNetworkStorageSdkClient)(nil).NetworkStorageGetVolumes), storageId)
}

// NetworkStoragePatch mocks base method.
func (m *MockNetworkStorageSdkClient) NetworkStoragePatch(storageId string, storageUpdate networkstorageapi.StorageNetworkUpdate) (*networkstorageapi.StorageNetwork, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkStoragePatch", storageId, storageUpdate)
	ret0, _ := ret[0].(*networkstorageapi.StorageNetwork)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NetworkStoragePatch indicates an expected call of NetworkStoragePatch.
func (mr *MockNetworkStorageSdkClientMockRecorder) NetworkStoragePatch(storageId, storageUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkStoragePatch", reflect.TypeOf((*MockNetworkStorageSdkClient)(nil).NetworkStoragePatch), storageId, storageUpdate)
}

// NetworkStoragePost mocks base method.
func (m *MockNetworkStorageSdkClient) NetworkStoragePost(storageCreate networkstorageapi.StorageNetworkCreate) (*networkstorageapi.StorageNetwork, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkStoragePost", storageCreate)
	ret0, _ := ret[0].(*networkstorageapi.StorageNetwork)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NetworkStoragePost indicates an expected call of NetworkStoragePost.
func (mr *MockNetworkStorageSdkClientMockRecorder) NetworkStoragePost(storageCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkStoragePost", reflect.TypeOf((*MockNetworkStorageSdkClient)(nil).NetworkStoragePost), storageCreate)
}
