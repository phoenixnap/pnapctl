// Code generated by MockGen. DO NOT EDIT.
// Source: common/client/networks/client.go

// Package sdkmocks is a generated GoMock package.
package sdkmocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	networkapi "github.com/phoenixnap/go-sdk-bmc/networkapi/v4"
)

// MockNetworkSdkClient is a mock of NetworkSdkClient interface.
type MockNetworkSdkClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkSdkClientMockRecorder
}

// MockNetworkSdkClientMockRecorder is the mock recorder for MockNetworkSdkClient.
type MockNetworkSdkClientMockRecorder struct {
	mock *MockNetworkSdkClient
}

// NewMockNetworkSdkClient creates a new mock instance.
func NewMockNetworkSdkClient(ctrl *gomock.Controller) *MockNetworkSdkClient {
	mock := &MockNetworkSdkClient{ctrl: ctrl}
	mock.recorder = &MockNetworkSdkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkSdkClient) EXPECT() *MockNetworkSdkClientMockRecorder {
	return m.recorder
}

// BgpPeerGroupDeleteById mocks base method.
func (m *MockNetworkSdkClient) BgpPeerGroupDeleteById(bgpPeerGroupId string) (*networkapi.BgpPeerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgpPeerGroupDeleteById", bgpPeerGroupId)
	ret0, _ := ret[0].(*networkapi.BgpPeerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BgpPeerGroupDeleteById indicates an expected call of BgpPeerGroupDeleteById.
func (mr *MockNetworkSdkClientMockRecorder) BgpPeerGroupDeleteById(bgpPeerGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgpPeerGroupDeleteById", reflect.TypeOf((*MockNetworkSdkClient)(nil).BgpPeerGroupDeleteById), bgpPeerGroupId)
}

// BgpPeerGroupGetById mocks base method.
func (m *MockNetworkSdkClient) BgpPeerGroupGetById(bgpPeerGroupId string) (*networkapi.BgpPeerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgpPeerGroupGetById", bgpPeerGroupId)
	ret0, _ := ret[0].(*networkapi.BgpPeerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BgpPeerGroupGetById indicates an expected call of BgpPeerGroupGetById.
func (mr *MockNetworkSdkClientMockRecorder) BgpPeerGroupGetById(bgpPeerGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgpPeerGroupGetById", reflect.TypeOf((*MockNetworkSdkClient)(nil).BgpPeerGroupGetById), bgpPeerGroupId)
}

// BgpPeerGroupPatchById mocks base method.
func (m *MockNetworkSdkClient) BgpPeerGroupPatchById(bgpPeerGroupId string, bgpPeerGroupPatch networkapi.BgpPeerGroupPatch) (*networkapi.BgpPeerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgpPeerGroupPatchById", bgpPeerGroupId, bgpPeerGroupPatch)
	ret0, _ := ret[0].(*networkapi.BgpPeerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BgpPeerGroupPatchById indicates an expected call of BgpPeerGroupPatchById.
func (mr *MockNetworkSdkClientMockRecorder) BgpPeerGroupPatchById(bgpPeerGroupId, bgpPeerGroupPatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgpPeerGroupPatchById", reflect.TypeOf((*MockNetworkSdkClient)(nil).BgpPeerGroupPatchById), bgpPeerGroupId, bgpPeerGroupPatch)
}

// BgpPeerGroupsGet mocks base method.
func (m *MockNetworkSdkClient) BgpPeerGroupsGet(location string) ([]networkapi.BgpPeerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgpPeerGroupsGet", location)
	ret0, _ := ret[0].([]networkapi.BgpPeerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BgpPeerGroupsGet indicates an expected call of BgpPeerGroupsGet.
func (mr *MockNetworkSdkClientMockRecorder) BgpPeerGroupsGet(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgpPeerGroupsGet", reflect.TypeOf((*MockNetworkSdkClient)(nil).BgpPeerGroupsGet), location)
}

// BgpPeerGroupsPost mocks base method.
func (m *MockNetworkSdkClient) BgpPeerGroupsPost(bgpPeerGroupCreate networkapi.BgpPeerGroupCreate) (*networkapi.BgpPeerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgpPeerGroupsPost", bgpPeerGroupCreate)
	ret0, _ := ret[0].(*networkapi.BgpPeerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BgpPeerGroupsPost indicates an expected call of BgpPeerGroupsPost.
func (mr *MockNetworkSdkClientMockRecorder) BgpPeerGroupsPost(bgpPeerGroupCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgpPeerGroupsPost", reflect.TypeOf((*MockNetworkSdkClient)(nil).BgpPeerGroupsPost), bgpPeerGroupCreate)
}

// PrivateNetworkDelete mocks base method.
func (m *MockNetworkSdkClient) PrivateNetworkDelete(networkId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateNetworkDelete", networkId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrivateNetworkDelete indicates an expected call of PrivateNetworkDelete.
func (mr *MockNetworkSdkClientMockRecorder) PrivateNetworkDelete(networkId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateNetworkDelete", reflect.TypeOf((*MockNetworkSdkClient)(nil).PrivateNetworkDelete), networkId)
}

// PrivateNetworkGetById mocks base method.
func (m *MockNetworkSdkClient) PrivateNetworkGetById(networkId string) (*networkapi.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateNetworkGetById", networkId)
	ret0, _ := ret[0].(*networkapi.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateNetworkGetById indicates an expected call of PrivateNetworkGetById.
func (mr *MockNetworkSdkClientMockRecorder) PrivateNetworkGetById(networkId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateNetworkGetById", reflect.TypeOf((*MockNetworkSdkClient)(nil).PrivateNetworkGetById), networkId)
}

// PrivateNetworkPut mocks base method.
func (m *MockNetworkSdkClient) PrivateNetworkPut(networkId string, privateNetworkUpdate networkapi.PrivateNetworkModify) (*networkapi.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateNetworkPut", networkId, privateNetworkUpdate)
	ret0, _ := ret[0].(*networkapi.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateNetworkPut indicates an expected call of PrivateNetworkPut.
func (mr *MockNetworkSdkClientMockRecorder) PrivateNetworkPut(networkId, privateNetworkUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateNetworkPut", reflect.TypeOf((*MockNetworkSdkClient)(nil).PrivateNetworkPut), networkId, privateNetworkUpdate)
}

// PrivateNetworksGet mocks base method.
func (m *MockNetworkSdkClient) PrivateNetworksGet(location string) ([]networkapi.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateNetworksGet", location)
	ret0, _ := ret[0].([]networkapi.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateNetworksGet indicates an expected call of PrivateNetworksGet.
func (mr *MockNetworkSdkClientMockRecorder) PrivateNetworksGet(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateNetworksGet", reflect.TypeOf((*MockNetworkSdkClient)(nil).PrivateNetworksGet), location)
}

// PrivateNetworksPost mocks base method.
func (m *MockNetworkSdkClient) PrivateNetworksPost(privateNetworkCreate networkapi.PrivateNetworkCreate, force bool) (*networkapi.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateNetworksPost", privateNetworkCreate, force)
	ret0, _ := ret[0].(*networkapi.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateNetworksPost indicates an expected call of PrivateNetworksPost.
func (mr *MockNetworkSdkClientMockRecorder) PrivateNetworksPost(privateNetworkCreate, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateNetworksPost", reflect.TypeOf((*MockNetworkSdkClient)(nil).PrivateNetworksPost), privateNetworkCreate, force)
}

// PublicNetworkDelete mocks base method.
func (m *MockNetworkSdkClient) PublicNetworkDelete(networkId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicNetworkDelete", networkId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublicNetworkDelete indicates an expected call of PublicNetworkDelete.
func (mr *MockNetworkSdkClientMockRecorder) PublicNetworkDelete(networkId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicNetworkDelete", reflect.TypeOf((*MockNetworkSdkClient)(nil).PublicNetworkDelete), networkId)
}

// PublicNetworkGetById mocks base method.
func (m *MockNetworkSdkClient) PublicNetworkGetById(networkId string) (*networkapi.PublicNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicNetworkGetById", networkId)
	ret0, _ := ret[0].(*networkapi.PublicNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicNetworkGetById indicates an expected call of PublicNetworkGetById.
func (mr *MockNetworkSdkClientMockRecorder) PublicNetworkGetById(networkId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicNetworkGetById", reflect.TypeOf((*MockNetworkSdkClient)(nil).PublicNetworkGetById), networkId)
}

// PublicNetworkIpBlockDelete mocks base method.
func (m *MockNetworkSdkClient) PublicNetworkIpBlockDelete(networkId, ipBlockId string, force bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicNetworkIpBlockDelete", networkId, ipBlockId, force)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicNetworkIpBlockDelete indicates an expected call of PublicNetworkIpBlockDelete.
func (mr *MockNetworkSdkClientMockRecorder) PublicNetworkIpBlockDelete(networkId, ipBlockId, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicNetworkIpBlockDelete", reflect.TypeOf((*MockNetworkSdkClient)(nil).PublicNetworkIpBlockDelete), networkId, ipBlockId, force)
}

// PublicNetworkIpBlockPost mocks base method.
func (m *MockNetworkSdkClient) PublicNetworkIpBlockPost(networkId string, idBlockCreate networkapi.PublicNetworkIpBlockCreate) (*networkapi.PublicNetworkIpBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicNetworkIpBlockPost", networkId, idBlockCreate)
	ret0, _ := ret[0].(*networkapi.PublicNetworkIpBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicNetworkIpBlockPost indicates an expected call of PublicNetworkIpBlockPost.
func (mr *MockNetworkSdkClientMockRecorder) PublicNetworkIpBlockPost(networkId, idBlockCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicNetworkIpBlockPost", reflect.TypeOf((*MockNetworkSdkClient)(nil).PublicNetworkIpBlockPost), networkId, idBlockCreate)
}

// PublicNetworkPatch mocks base method.
func (m *MockNetworkSdkClient) PublicNetworkPatch(networkId string, publicNetworkPatch networkapi.PublicNetworkModify) (*networkapi.PublicNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicNetworkPatch", networkId, publicNetworkPatch)
	ret0, _ := ret[0].(*networkapi.PublicNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicNetworkPatch indicates an expected call of PublicNetworkPatch.
func (mr *MockNetworkSdkClientMockRecorder) PublicNetworkPatch(networkId, publicNetworkPatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicNetworkPatch", reflect.TypeOf((*MockNetworkSdkClient)(nil).PublicNetworkPatch), networkId, publicNetworkPatch)
}

// PublicNetworksGet mocks base method.
func (m *MockNetworkSdkClient) PublicNetworksGet(location string) ([]networkapi.PublicNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicNetworksGet", location)
	ret0, _ := ret[0].([]networkapi.PublicNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicNetworksGet indicates an expected call of PublicNetworksGet.
func (mr *MockNetworkSdkClientMockRecorder) PublicNetworksGet(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicNetworksGet", reflect.TypeOf((*MockNetworkSdkClient)(nil).PublicNetworksGet), location)
}

// PublicNetworksPost mocks base method.
func (m *MockNetworkSdkClient) PublicNetworksPost(publicNetworkCreate networkapi.PublicNetworkCreate) (*networkapi.PublicNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicNetworksPost", publicNetworkCreate)
	ret0, _ := ret[0].(*networkapi.PublicNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicNetworksPost indicates an expected call of PublicNetworksPost.
func (mr *MockNetworkSdkClientMockRecorder) PublicNetworksPost(publicNetworkCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicNetworksPost", reflect.TypeOf((*MockNetworkSdkClient)(nil).PublicNetworksPost), publicNetworkCreate)
}
